@using BlazorApp.Data
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider />
<MudPopoverProvider />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
            <AuthorizeView>
                <Authorized>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        @* <input type="hidden" name="ReturnUrl" value="@currentUrl" /> *@
                        <button type="submit" class="dropdown-item notify-item">
                            <i class="ri-logout-box-line"></i>
                            <span>Logout</span>
                        </button>
                    </form>
                </Authorized>
            </AuthorizeView>
        </div>
        <CascadingValue Name="UserData" Value="@UserData">
            <article class="content px-4">
                @Body
            </article>
        </CascadingValue>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    UserData UserData { get; set; } = new UserData();

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
    }

    private async Task GetClaimsPrincipalData()
    {
        //TODO ensure better propagation of logged in user state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user == null || user.Identity == null)
        {
            return;
        }

        if (user.Identity.IsAuthenticated)
        {
            var email = user.Claims.FirstOrDefault(x => x.Type == "sub")?.Value;
            string displayName = user.Claims.FirstOrDefault(x => x.Type == "name").Value;


            if (string.IsNullOrWhiteSpace(email))
            {
                return;
            }

            var claimsList = new List<string>();

            // Iterate through each claim in the user's identity
            foreach (var claim in user.Claims)
            {
                // Format each claim as "Type: Value"
                claimsList.Add($"{claim.Type}: {claim.Value}");
            }

            var username = email?.Split('@')[0]!;

            UserData = new UserData
                {
                    DisplayName = displayName,
                    Email = email,
                    Username = username,
                    UserClaims = user.Claims.ToList()
                };
        }
    }
}
